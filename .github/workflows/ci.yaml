name: Main CI
on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main
      - prod
    tags:
      - '**'

jobs:
  fmt:
    name: Format
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # pin@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@6ed004b9ccb68dbc28e7c85bee15fa93dbd214ac # pin@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # pin@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Check Rust formatting
        run: cargo fmt --check --all
      - name: Check Nix formatting
        run: |
          nix develop -c \
            nixpkgs-fmt --check flake.nix

  clippy:
    name: Clippy
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # pin@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@6ed004b9ccb68dbc28e7c85bee15fa93dbd214ac # pin@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # pin@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Authorize private git repos
        run: git config --global url."https://${{ secrets.GIT_HUB_TOKEN }}@github.com".insteadOf https://github.com
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # pin@v2

      - name: Clippy lints
        run: |
          nix develop -c \
            cargo clippy --all --all-features --all-targets --no-deps -- -D warnings

  doc:
    name: Doc
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # pin@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@6ed004b9ccb68dbc28e7c85bee15fa93dbd214ac # pin@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # pin@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Authorize private git repos
        run: git config --global url."https://${{ secrets.GIT_HUB_TOKEN }}@github.com".insteadOf https://github.com
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # pin@v2

      - name: Cargo Doc
        run: |
          nix develop -c \
            cargo doc --all --all-features --no-deps --document-private-items

  test:
    name: Test
    strategy:
      matrix:
        platform: [ public-ubuntu-22.04-32core, macos-13 ]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # pin@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@6ed004b9ccb68dbc28e7c85bee15fa93dbd214ac # pin@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # pin@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Authorize private git repos
        run: git config --global url."https://${{ secrets.GIT_HUB_TOKEN }}@github.com".insteadOf https://github.com
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # pin@v2

      - name: Configure cargo to exclude platform-specific crates
        if: ${{ matrix.platform == 'macos-13' }}
        run: |
          MAC_EXCLUDE=(
            "--exclude orb-thermal-cam-ctrl"
            "--exclude seek-camera"
            "--exclude seek-camera-sys"
            "--exclude can-rs"
            "--exclude mcu-util"
          )
          echo MAC_EXCLUDE="${MAC_EXCLUDE[*]}" >>${GITHUB_ENV}
          cat ${GITHUB_ENV}
      - name: Cargo Test
        run: |
          uname -a
          nix develop -c env
          nix develop -c \
            cargo test --all --all-features --all-targets $MAC_EXCLUDE

  build:
    name: Build
    runs-on: public-ubuntu-22.04-32core
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # pin@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@6ed004b9ccb68dbc28e7c85bee15fa93dbd214ac # pin@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # pin@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Authorize private git repos
        run: git config --global url."https://${{ secrets.GIT_HUB_TOKEN }}@github.com".insteadOf https://github.com
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # pin@v2

      - run: echo MAYBE_LTO="--config profile.release.lto=true" >>${GITHUB_ENV}
        if: ${{ github.ref_name == 'main' || github.ref_type == 'tag' }}
      - name: Compile ${{ matrix.target }} Binaries
        run: |
          set -eux
          flavors=(
            prod
            stage
          )
          targets=(
            aarch64
            x86_64
          )
          binaries=(
            mcu-util
            orb-backend-state
            orb-attest
            orb-ui
            orb-thermal-cam-ctrl
            verity-tree-calc
          )
          uname -a
          nix develop -c env
          for t in ${targets[@]}; do
            TARGETS="${TARGETS:-} --target ${t}-unknown-linux-gnu"
          done
          echo "TARGETS=${TARGETS}"
          for f in ${flavors[@]}; do
            if [[ "${f}" == "prod" ]]; then
              FEATURES=""
            elif [[ "${f}" == "stage" ]]; then
              FEATURES="--features stage"
            else
              echo "Unexpected flavor"
              exit 1
            fi
            echo "Building flavor=${f}"
            nix develop -c \
              cargo zigbuild ${MAYBE_LTO:-} --all --release ${TARGETS} --no-default-features ${FEATURES}
            for b in ${binaries[@]}; do
              mkdir -p "binaries/${b}/"
              echo Packaging ${b}
              for t in ${targets[@]}; do
                nix develop -c \
                  cargo deb --no-build --no-strip -p ${b} --target ${t}-unknown-linux-gnu -o binaries/${b}/${b}_${f}_${t}.deb
                cp -L target/${t}-unknown-linux-gnu/release/${b} binaries/${b}/${b}_${f}_${t}
              done
            done
          done
          ls -aRsh binaries

      - name: Bundle artifacts
        run: |
          set -eux
          mkdir artifacts
          for b in binaries/*; do
            b="$(basename ${b})"
            # We make sure that the tarball is idempotent:
            # https://stackoverflow.com/a/54908072
            tar --sort=name --owner=root:0 --group=root:0 --mtime='@0' \
              -vahcf artifacts/${b}.tar.zst -C binaries/${b} .
          done
          ls -aRsh artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # pin@v3
        with:
          name: artifacts
          path: artifacts
          if-no-files-found: error

  cargo-deny:
    name: Check licensing
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # pin@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@6ed004b9ccb68dbc28e7c85bee15fa93dbd214ac # pin@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # pin@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Authorize private git repos
        run: git config --global url."https://${{ secrets.GIT_HUB_TOKEN }}@github.com".insteadOf https://github.com

      - name: Check licenses and security advisories
        run: |
          nix develop -c \
            cargo deny check

  release:
    name: Create Github Release
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Extract component name and semver
        id: tag-parse
        run: |
          set -eux
          echo "Ref name: ${GITHUB_REF_NAME}"

          CI_COMPONENT="${GITHUB_REF_NAME%/*}"
          CI_SEMVER="${GITHUB_REF_NAME#*/}"
          echo "CI_COMPONENT=${CI_COMPONENT}"
          echo "CI_SEMVER=${CI_SEMVER}"

          echo CI_COMPONENT="${CI_COMPONENT}" >>${GITHUB_ENV}
          echo CI_COMPONENT="${CI_COMPONENT}" >>${GITHUB_OUTPUT}
          echo CI_SEMVER="${CI_SEMVER}" >>${GITHUB_ENV}
          echo CI_SEMVER="${CI_SEMVER}" >>${GITHUB_OUTPUT}

      - name: Download Artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # pin@v3
        with:
          path: .
      - name: List Artifacts dir
        run: ls -aRsh artifacts/

      - name: Compute sha256 checksums
        run: |
          set -eux
          pushd artifacts
          for f in *; do
            sha256sum "${f}" > "${f}.sha256" 
          done
          ls -aRsh
          popd

      - name: Upload Release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # pin@v1
        with:
          fail_on_unmatched_files: true
          files: |
            artifacts/${{ steps.tag-parse.outputs.CI_COMPONENT }}.tar.zst
            artifacts/${{ steps.tag-parse.outputs.CI_COMPONENT }}.tar.zst.sha256
