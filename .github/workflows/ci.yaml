name: Main CI
on:
  pull_request:
  push:
    branches:
      - main
      - prod
    tags:
      - "*"

jobs:
  fmt:
    name: Format
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Check Rust formatting
        run: cargo fmt --check --all
      - name: Check Nix formatting
        run: |
          nix develop -c \
            nixpkgs-fmt --check flake.nix

  clippy:
    name: Clippy
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Authorize private git repos
        run: git config --global url."https://${{ secrets.GIT_HUB_TOKEN }}@github.com".insteadOf https://github.com
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Clippy lints
        run: |
          nix develop -c \
            cargo clippy --all --all-features --all-targets --no-deps -- -D warnings

  doc:
    name: Doc
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Authorize private git repos
        run: git config --global url."https://${{ secrets.GIT_HUB_TOKEN }}@github.com".insteadOf https://github.com
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Cargo Doc
        run: |
          nix develop -c \
            cargo doc --all --all-features --no-deps --document-private-items

  test:
    name: Test
    strategy:
      matrix:
        platform: [ubuntu-22.04-32core, macos-13]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Authorize private git repos
        run: git config --global url."https://${{ secrets.GIT_HUB_TOKEN }}@github.com".insteadOf https://github.com
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Configure cargo to exclude platform-specific crates
        if: ${{ matrix.platform == 'macos-13' }}
        run: echo MAC_EXCLUDE="--exclude thermal-cam-util" >>${GITHUB_ENV}
      - name: Cargo Test
        run: |
          uname -a
          nix develop -c env
          nix develop -c \
            cargo test --all --all-features --all-targets $MAC_EXCLUDE

  build:
    name: Build
    strategy:
      matrix:
        target: [aarch64, x86_64]
    runs-on: ubuntu-22.04-32core
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Authorize private git repos
        run: git config --global url."https://${{ secrets.GIT_HUB_TOKEN }}@github.com".insteadOf https://github.com
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2

      - run: echo MAYBE_LTO="--config profile.release.lto=true" >>${GITHUB_ENV}
        if: ${{ github.ref_name == 'main' || github.ref_type == 'tag' }}
      - name: Compile ${{ matrix.target }} Binaries
        run: |
          uname -a
          nix develop -c env
          nix develop -c \
            cargo zigbuild $MAYBE_LTO --all --all-features --target ${{ matrix.target }}-unknown-linux-gnu --release

      - name: Bundle artifacts
        run: |
          set -eux
          binaries=(
            orb-backend-state
            thermal-cam-util
            verity-tree-calc
            orb-ui
          )
          mkdir artifacts
          for b in ${binaries[@]}; do
            cp -L target/${{ matrix.target }}-unknown-linux-gnu/release/${b} artifacts/${b}-${{ matrix.target }}
          done
          ls -aR artifacts

      - name: Upload ${{ matrix.target }} artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.target }}
          path: artifacts

  cargo-deny:
    name: Check licensing
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/install-nix-action@v22
        with:
          github_access_token: ${{ secrets.GIT_HUB_TOKEN }}
      - uses: cachix/cachix-action@v12
        continue-on-error: true
        with:
          name: worldcoin
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Authorize private git repos
        run: git config --global url."https://${{ secrets.GIT_HUB_TOKEN }}@github.com".insteadOf https://github.com

      - name: Check licenses and security advisories
        run: |
          nix develop -c \
            cargo deny check

  release:
    name: Create Github Release
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: .
      - run: |
          set -eux
          mkdir artifacts
          cp -L artifacts-*/* artifacts/
          ls -alR artifacts

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        # only run this for release tags (e.g. v1.1.0)
        if: ${{ github.ref_type == 'tag' && startsWith(github.ref_name, 'v') }}
        with:
          fail_on_unmatched_files: true
          files: artifacts/*
            
      - name: Upload Development Build
        # only run this for main branch
        if: ${{ github.ref_name == 'main' }}
        run: |
          gh release delete latest \
            --yes \
            --cleanup-tag \
            --repo ${{ github.repository }} || true
          gh release create latest \
            --title 'Development Build' \
            --notes 'Latest successful build of main' \
            --prerelease \
            --repo ${{ github.repository }} \
            artifacts/* 
        env:
          GH_TOKEN: ${{ github.token }}

